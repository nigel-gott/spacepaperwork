# Generated by Django 3.1.4 on 2021-02-10 18:09

import django.utils.timezone
import timezone_field.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("user_forms", "__first__"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AuthConfig",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("code_of_conduct", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Character",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ingame_name", models.TextField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Corp",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(unique=True)),
                ("full_name", models.TextField(blank=True, null=True, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("public_corp", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="CorpApplication",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.TextField(
                        choices=[
                            ("unapproved", "unapproved"),
                            ("approved", "approved"),
                            ("rejected", "rejected"),
                        ],
                        default="unapproved",
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name="DiscordGuild",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("guild_id", models.TextField()),
                ("active", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="DiscordRole",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField()),
                ("role_id", models.TextField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="GooseGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(unique=True)),
                ("description", models.TextField()),
                ("editable", models.BooleanField(default=True)),
                ("linked_discord_role", models.TextField(blank=True, null=True)),
                (
                    "required_discord_role",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="users.discordrole",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GoosePermission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        choices=[
                            (
                                "basic_access",
                                "Able to Apply to join and view the home page and other basic registered user pages",
                            ),
                            ("loot_tracker", "Able to use the loot tracker"),
                            (
                                "loot_tracker_admin",
                                "Automatically an admin in every fleet and able to do loot buyback",
                            ),
                            (
                                "user_admin",
                                "Able to approve user applications and manage users",
                            ),
                            (
                                "user_group_admin",
                                "Able to edit/add user groups and their permissions",
                            ),
                            (
                                "single_corp_admin",
                                "Able to approve corp applications for a specific corp and manage characters in that corp",
                            ),
                            (
                                "all_corp_admin",
                                "Able to approve corp applications for all corps and manage characters in all corps",
                            ),
                            ("ship_orderer", "Able to place ship orders"),
                            ("free_ship_orderer", "Able to place free ship orders"),
                            (
                                "ship_order_admin",
                                "Able to claim and work on ship orders",
                            ),
                            (
                                "ship_price_admin",
                                "Able to add/remove ship types and set if they are free or not",
                            ),
                            (
                                "venmo_admin",
                                "Able to approve/deny pending venmo transactions.",
                            ),
                        ],
                        unique=True,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "corp",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.corp",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GooseUser",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timezone",
                    timezone_field.fields.TimeZoneField(default="Europe/London"),
                ),
                (
                    "broker_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=8.0,
                        max_digits=5,
                        verbose_name="Your Broker Fee in %",
                    ),
                ),
                (
                    "transaction_tax",
                    models.DecimalField(
                        decimal_places=2,
                        default=15.0,
                        max_digits=5,
                        verbose_name="Your Transaction Tax in %",
                    ),
                ),
                (
                    "status",
                    models.TextField(
                        choices=[
                            ("unapproved", "unapproved"),
                            ("approved", "approved"),
                            ("rejected", "rejected"),
                        ],
                        default="unapproved",
                    ),
                ),
                ("cached_username", models.TextField()),
                ("uid", models.TextField()),
                ("nick", models.TextField()),
                ("avatar_hash", models.TextField()),
                ("notes", models.TextField(blank=True, null=True)),
                ("sa_profile", models.TextField(blank=True, null=True)),
                (
                    "default_character",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.character",
                    ),
                ),
                (
                    "site_user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "voucher",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="current_vouches",
                        to="users.gooseuser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserApplication",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.TextField(
                        choices=[
                            ("unapproved", "unapproved"),
                            ("approved", "approved"),
                            ("rejected", "rejected"),
                        ],
                        default="unapproved",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("application_notes", models.TextField(blank=True, null=True)),
                ("ingame_name", models.TextField(blank=True, null=True)),
                ("previous_alliances", models.TextField(blank=True, null=True)),
                ("activity", models.TextField(blank=True, null=True)),
                ("looking_for", models.TextField(blank=True, null=True)),
                ("answers", models.JSONField(blank=True)),
                (
                    "corp",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.corp"
                    ),
                ),
                (
                    "existing_character",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="users.character",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.gooseuser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GroupPermission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.goosegroup",
                    ),
                ),
                (
                    "permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.goosepermission",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GroupMember",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.goosegroup",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.gooseuser",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="discordrole",
            index=models.Index(fields=["name"], name="users_disco_name_ed0024_idx"),
        ),
        migrations.AddField(
            model_name="corpapplication",
            name="character",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="users.character"
            ),
        ),
        migrations.AddField(
            model_name="corpapplication",
            name="corp",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="users.corp"
            ),
        ),
        migrations.AddField(
            model_name="corp",
            name="discord_role_given_on_approval",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="corps_giving_on_approval",
                to="users.discordrole",
            ),
        ),
        migrations.AddField(
            model_name="corp",
            name="discord_roles_allowing_application",
            field=models.ManyToManyField(
                related_name="corps_allowing_application", to="users.DiscordRole"
            ),
        ),
        migrations.AddField(
            model_name="corp",
            name="sign_up_form",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="user_forms.dynamicform",
            ),
        ),
        migrations.AddField(
            model_name="character",
            name="corp",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="users.corp"
            ),
        ),
        migrations.AddField(
            model_name="character",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="users.gooseuser"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="groupmember",
            unique_together={("group", "user")},
        ),
    ]
