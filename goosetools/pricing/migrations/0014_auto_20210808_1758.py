# Generated by Django 3.1.4 on 2021-08-08 17:58

import django.db.models.deletion
from django.db import migrations, models


# noinspection PyPep8Naming
# pylint: disable=unused-argument
def populate_latest(apps, schema_editor):
    ItemMarketDataEvent = apps.get_model("pricing", "ItemMarketDataEvent")
    LatestItemMarketDataEvent = apps.get_model("pricing", "LatestItemMarketDataEvent")
    PriceList = apps.get_model("pricing", "PriceList")

    ItemMarketDataEvent.objects.filter(price_list__isnull=True).delete()

    for price_list in PriceList.objects.all():
        print(f"Updating {price_list.name}, running big query first...")
        print("Running count query")
        unqiue_items = (
            ItemMarketDataEvent.objects.values("item")
            .filter(price_list=price_list)
            .distinct()
        )
        count = unqiue_items.count()
        print(f"Have {count} to work through")
        print_count = int(count / 100)
        i = 0
        for item in unqiue_items:
            latest = (
                ItemMarketDataEvent.objects.filter(
                    price_list=price_list, item_id=item["item"]
                )
                .order_by("-time")
                .first()
            )
            if i % print_count == 0:
                print(f"Up to {i}/{count}", end="\r")
            LatestItemMarketDataEvent.objects.create(
                price_list=latest.price_list,
                item=latest.item,
                time=latest.time,
                event=latest,
            )
            i += 1


class Migration(migrations.Migration):

    dependencies = [
        ("items", "0011_auto_20210503_1822"),
        ("venmo", "0012_auto_20210607_0724"),
        ("pricing", "0013_auto_20210807_1303"),
    ]

    operations = [
        migrations.AddField(
            model_name="dataset",
            name="google_sheet_item_column",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="dataset",
            name="google_sheet_key_column",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="dataset",
            name="google_sheet_unique_key_column",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="dataset",
            name="data_set_type",
            field=models.TextField(
                choices=[("raw_market_data", "raw_market_data"), ("order", "order")],
                default="raw_market_data",
            ),
        ),
        migrations.AlterField(
            model_name="dataset",
            name="description",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="dataset",
            name="tags",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="DataType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField()),
                ("google_sheet_column", models.TextField(blank=True, null=True)),
                (
                    "currency",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="venmo.virtualcurrency",
                    ),
                ),
                (
                    "data_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pricing.dataset",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DataPoint",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("time", models.DateTimeField(auto_now=True)),
                ("key", models.TextField(blank=True, null=True)),
                ("unique_key", models.TextField(blank=True, null=True)),
                (
                    "decimal_value",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=22, null=True
                    ),
                ),
                (
                    "data_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pricing.dataset",
                    ),
                ),
                (
                    "data_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pricing.datatype",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="items.item",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="datatype",
            index=models.Index(
                fields=["data_set"], name="pricing_dat_data_se_aeb88f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="datatype",
            unique_together={("data_set", "name")},
        ),
        migrations.AddIndex(
            model_name="datapoint",
            index=models.Index(
                fields=["data_set", "data_type", "time", "item", "unique_key", "key"],
                name="pricing_dat_data_se_010807_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="datapoint",
            unique_together={("data_set", "unique_key")},
        ),
        migrations.RunPython(populate_latest),
    ]
